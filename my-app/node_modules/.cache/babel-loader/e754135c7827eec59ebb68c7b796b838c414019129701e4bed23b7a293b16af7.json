{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaiso\\\\Desktop\\\\411_Github\\\\310_Frontend\\\\my-app\\\\src\\\\components\\\\Chart.js\";\n// import Chart from 'chart.js/auto'\n\n// (async function() {\n//   const data = [\n//     { year: 2010, count: 10 },\n//     { year: 2011, count: 20 },\n//     { year: 2012, count: 15 },\n//     { year: 2013, count: 25 },\n//     { year: 2014, count: 22 },\n//     { year: 2015, count: 30 },\n//     { year: 2016, count: 28 },\n//   ];\n\n//   new Chart(\n//     document.getElementById('acquisitions'),\n//     {\n//       type: 'bar',\n//       data: {\n//         labels: data.map(row => row.year),\n//         datasets: [\n//           {\n//             label: 'Acquisitions by year',\n//             data: data.map(row => row.count)\n//           }\n//         ]\n//       }\n//     }\n//   );\n// })();\n\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\n// ChartJS.register(ArcElement, Tooltip, Legend);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{/* <Doughtnut data={...} /> */}\n\n// const Chart = ({ data, type }) => {\nconst Chart = () => {\n  // const myChart = new Chart(ctx, {...});\n  const revenueData = [{\n    \"label\": \"ads\",\n    \"value\": 32\n  }, {\n    \"label\": \"subss\",\n    \"value\": 45\n  }, {\n    \"label\": \"sponsors\",\n    \"value\": 23\n  }];\n\n  // var myChart = new Chart(grapharea, { type: 'bar', data: barData, options: barOptions });\n\n  // myChart.destroy();\n\n  let chart = document.getElementById('chartOne').getContext('2d');\n  let barChart = new Chart(chart, {\n    type: 'bar',\n    // bar, horizontalBar, pie, line, doughnut, radar, polarArea\n    data: {\n      labels: ['boston', 'springfield'],\n      datasets: [6100, 4300]\n    },\n    options: {}\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"chartOne\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_c = Chart;\nexport default Chart;\n\n// // const DATA_COUNT = 7;\n// // const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\n// // const labels = Utils.months({count: 7});\n// // const data = {\n// //   labels: labels,\n// //   datasets: [\n// //     {\n// //       label: 'Dataset 1',\n// //       data: Utils.numbers(NUMBER_CFG),\n// //       borderColor: Utils.CHART_COLORS.red,\n// //       backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n// //     },\n// //     {\n// //       label: 'Dataset 2',\n// //       data: Utils.numbers(NUMBER_CFG),\n// //       borderColor: Utils.CHART_COLORS.blue,\n// //       backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n// //     }\n// //   ]\n// // };\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["Chart","ChartJS","ArcElement","Tooltip","Legend","Line","jsxDEV","_jsxDEV","revenueData","chart","document","getElementById","getContext","barChart","type","data","labels","datasets","options","children","src","fileName","_jsxFileName","lineNumber","columnNumber","rel","href","id","_c","$RefreshReg$"],"sources":["C:/Users/kaiso/Desktop/411_Github/310_Frontend/my-app/src/components/Chart.js"],"sourcesContent":["// import Chart from 'chart.js/auto'\r\n\r\n// (async function() {\r\n//   const data = [\r\n//     { year: 2010, count: 10 },\r\n//     { year: 2011, count: 20 },\r\n//     { year: 2012, count: 15 },\r\n//     { year: 2013, count: 25 },\r\n//     { year: 2014, count: 22 },\r\n//     { year: 2015, count: 30 },\r\n//     { year: 2016, count: 28 },\r\n//   ];\r\n\r\n//   new Chart(\r\n//     document.getElementById('acquisitions'),\r\n//     {\r\n//       type: 'bar',\r\n//       data: {\r\n//         labels: data.map(row => row.year),\r\n//         datasets: [\r\n//           {\r\n//             label: 'Acquisitions by year',\r\n//             data: data.map(row => row.count)\r\n//           }\r\n//         ]\r\n//       }\r\n//     }\r\n//   );\r\n// })();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n// ChartJS.register(ArcElement, Tooltip, Legend);\r\n\r\n{/* <Doughtnut data={...} /> */}\r\n\r\n// const Chart = ({ data, type }) => {\r\nconst Chart = () => {\r\n\r\n    // const myChart = new Chart(ctx, {...});\r\n    const revenueData = [\r\n        {\r\n            \"label\": \"ads\",\r\n            \"value\": 32\r\n        },\r\n        {\r\n            \"label\": \"subss\",\r\n            \"value\": 45\r\n        },\r\n        {\r\n            \"label\": \"sponsors\",\r\n            \"value\": 23\r\n        },\r\n    ];\r\n\r\n    // var myChart = new Chart(grapharea, { type: 'bar', data: barData, options: barOptions });\r\n\r\n    // myChart.destroy();\r\n\r\n    let chart = document.getElementById('chartOne').getContext('2d');\r\n\r\n    let barChart = new Chart(chart, {\r\n        type: 'bar', // bar, horizontalBar, pie, line, doughnut, radar, polarArea\r\n        data: {\r\n            labels: ['boston', 'springfield'],\r\n            datasets: [6100, 4300],\r\n        },\r\n        options: {}\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js\"></script>\r\n            <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"></link>\r\n            <canvas id=\"chartOne\"></canvas>\r\n            {/* <Line\r\n                data={{\r\n                    labels: revenueData.map((data) => data.label),\r\n                    datasets: [\r\n                    {\r\n                        label: \"Revenue\",\r\n                        data: revenueData.map((data) => data.revenue),\r\n                        backgroundColor: \"#064FF0\",\r\n                        borderColor: \"#064FF0\",\r\n                    },\r\n                    {\r\n                        label: \"Cost\",\r\n                        data: revenueData.map((data) => data.cost),\r\n                        backgroundColor: \"#FF3030\",\r\n                        borderColor: \"#FF3030\",\r\n                    },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    elements: {\r\n                    line: {\r\n                        tension: 0.5,\r\n                    },\r\n                    },\r\n                    plugins: {\r\n                    title: {\r\n                        text: \"Monthly Revenue & Cost\",\r\n                    },\r\n                    },\r\n                }}\r\n            /> */}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Chart;\r\n\r\n\r\n// // const DATA_COUNT = 7;\r\n// // const NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\r\n\r\n// // const labels = Utils.months({count: 7});\r\n// // const data = {\r\n// //   labels: labels,\r\n// //   datasets: [\r\n// //     {\r\n// //       label: 'Dataset 1',\r\n// //       data: Utils.numbers(NUMBER_CFG),\r\n// //       borderColor: Utils.CHART_COLORS.red,\r\n// //       backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\r\n// //     },\r\n// //     {\r\n// //       label: 'Dataset 2',\r\n// //       data: Utils.numbers(NUMBER_CFG),\r\n// //       borderColor: Utils.CHART_COLORS.blue,\r\n// //       backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\r\n// //     }\r\n// //   ]\r\n// // };"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAuBA,SAASA,KAAK,IAAIC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxE,SAASC,IAAI,QAAQ,iBAAiB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,CAAC;;AAED;AACA,MAAMP,KAAK,GAAGA,CAAA,KAAM;EAEhB;EACA,MAAMQ,WAAW,GAAG,CAChB;IACI,OAAO,EAAE,KAAK;IACd,OAAO,EAAE;EACb,CAAC,EACD;IACI,OAAO,EAAE,OAAO;IAChB,OAAO,EAAE;EACb,CAAC,EACD;IACI,OAAO,EAAE,UAAU;IACnB,OAAO,EAAE;EACb,CAAC,CACJ;;EAED;;EAEA;;EAEA,IAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;EAEhE,IAAIC,QAAQ,GAAG,IAAIb,KAAK,CAACS,KAAK,EAAE;IAC5BK,IAAI,EAAE,KAAK;IAAE;IACbC,IAAI,EAAE;MACFC,MAAM,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC;MACjCC,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI;IACzB,CAAC;IACDC,OAAO,EAAE,CAAC;EACd,CAAC,CAAC;EAGF,oBACIX,OAAA;IAAAY,QAAA,gBACIZ,OAAA;MAAQa,GAAG,EAAC;IAAoE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAC1FjB,OAAA;MAAMkB,GAAG,EAAC,YAAY;MAACC,IAAI,EAAC;IAAuE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC3GjB,OAAA;MAAQoB,EAAE,EAAC;IAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAgC9B,CAAC;AAGd,CAAC;AAACI,EAAA,GAzEI5B,KAAK;AA2EX,eAAeA,KAAK;;AAGpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}