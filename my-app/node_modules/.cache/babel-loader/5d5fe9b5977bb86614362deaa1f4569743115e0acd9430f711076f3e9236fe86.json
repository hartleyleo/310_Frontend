{"ast":null,"code":"import qbData from \"./QBdata\";\nconst playerTilePhotos = [['./playerCards/favre_player_card.png', 'Brett Favre'], ['./playerCards/aikman_player_card.png', 'Troy Aikman'], ['./playerCards/rodgers_player_card.png', 'Aaron Rodgers'], ['./playerCards/elway_player_card.png', 'John Elway'], ['./playerCards/staubach_player_card.png', 'Roger Staubach'], ['./playerCards/marino_player_card.png', 'Dan Marino'], ['./playerCards/brees_player_card.png', 'Drew Brees'], ['./playerCards/manning_player_card.png', 'Peyton Manning'], ['./playerCards/montana_player_card.png', 'Joe Montana'], ['./playerCards/mahomes_player_card.png', 'Patrick Mahomes'], ['./playerCards/brady_player_card.png', 'Tom Brady'], ['./playerCards/young_player_card.png', 'Steve Young']];\nconst bestPlayerStats = new Map();\nqbData.forEach(entry => {\n  const [name,, completionPerc, yards, int, rate] = entry;\n  const player = bestPlayerStats.get(name);\n  if (player) {\n    player.yearsPlayed++;\n    player.completionPerc = Math.max(player.completionPerc, completionPerc);\n    player.yards = Math.max(player.yards, yards);\n    player.int = Math.max(player.int, int);\n    player.rate = Math.max(player.rate, rate);\n  } else {\n    bestPlayerStats.set(name, {\n      name,\n      yearsPlayed: 1,\n      completionPerc,\n      yards,\n      int,\n      rate\n    });\n  }\n});\n\n// Convert the Map values to an array of player objects\nconst playersBestObjArray = Array.from(bestPlayerStats.values());\nconst resultObject = {};\nqbData.forEach(entry => {\n  const [name, year, completionPerc, yards, int, rate] = entry;\n  if (resultObject[name]) {\n    // If the entry already exists, append values to their respective arrays\n    resultObject[name].years.push(year);\n    resultObject[name].completionPerc.push(completionPerc);\n    resultObject[name].yards.push(yards);\n    resultObject[name].int.push(int);\n    resultObject[name].rate.push(rate);\n  } else {\n    // If the entry doesn't exist, create a new object with arrays\n    resultObject[name] = {\n      years: [year],\n      completionPerc: [completionPerc],\n      yards: [yards],\n      int: [int],\n      rate: [rate]\n    };\n  }\n});\n\n// Convert the resultObject into an array of objects\nconst comparisonArray = Object.keys(resultObject).map(name => ({\n  name,\n  years: resultObject[name].years,\n  completionPerc: resultObject[name].completionPerc,\n  yards: resultObject[name].yards,\n  int: resultObject[name].int,\n  rate: resultObject[name].rate\n}));\nconst recordValues = {\n  completionPerc: [qbData[0][2], qbData[0][0]],\n  yards: [qbData[0][3], qbData[0][0]],\n  ints: [qbData[0][4], qbData[0][0]],\n  rate: [qbData[0][5], qbData[0][0]]\n};\nqbData.forEach(player => {\n  const [playerName,, completionPerc, yards, ints, rate] = player;\n  if (completionPerc > recordValues.completionPerc[0]) {\n    recordValues.completionPerc = [completionPerc, playerName];\n  }\n  if (yards > recordValues.yards[0]) {\n    recordValues.yards = [yards, playerName];\n  }\n  if (ints > recordValues.ints[0]) {\n    recordValues.ints = [ints, playerName];\n  }\n  if (rate > recordValues.rate[0]) {\n    recordValues.rate = [rate, playerName];\n  }\n});\nexport { playerTilePhotos, playersBestObjArray, comparisonArray, recordValues };","map":{"version":3,"names":["qbData","playerTilePhotos","bestPlayerStats","Map","forEach","entry","name","completionPerc","yards","int","rate","player","get","yearsPlayed","Math","max","set","playersBestObjArray","Array","from","values","resultObject","year","years","push","comparisonArray","Object","keys","map","recordValues","ints","playerName"],"sources":["C:/Users/kaiso/Desktop/411_Github/310_Frontend/my-app/src/FormattedData.js"],"sourcesContent":["import qbData from \"./QBdata\";\r\n\r\nconst playerTilePhotos = [\r\n    [ './playerCards/favre_player_card.png', 'Brett Favre' ],\r\n    [ './playerCards/aikman_player_card.png', 'Troy Aikman' ],\r\n    [ './playerCards/rodgers_player_card.png', 'Aaron Rodgers' ],\r\n    [ './playerCards/elway_player_card.png', 'John Elway' ],\r\n    [ './playerCards/staubach_player_card.png', 'Roger Staubach' ],\r\n    [ './playerCards/marino_player_card.png', 'Dan Marino' ],\r\n    [ './playerCards/brees_player_card.png', 'Drew Brees' ],\r\n    [ './playerCards/manning_player_card.png', 'Peyton Manning' ],\r\n    [ './playerCards/montana_player_card.png', 'Joe Montana' ],\r\n    [ './playerCards/mahomes_player_card.png', 'Patrick Mahomes' ],\r\n    [ './playerCards/brady_player_card.png', 'Tom Brady' ],\r\n    [ './playerCards/young_player_card.png', 'Steve Young' ]\r\n];\r\n\r\nconst bestPlayerStats = new Map();\r\n\r\nqbData.forEach(entry => {\r\n    const [name, , completionPerc, yards, int, rate] = entry;\r\n    const player = bestPlayerStats.get(name);\r\n\r\n    if (player) {\r\n        player.yearsPlayed++;\r\n        player.completionPerc = Math.max(player.completionPerc, completionPerc);\r\n        player.yards = Math.max(player.yards, yards);\r\n        player.int = Math.max(player.int, int);\r\n        player.rate = Math.max(player.rate, rate);\r\n    } else {\r\n        bestPlayerStats.set(name, {\r\n            name,\r\n            yearsPlayed: 1,\r\n            completionPerc,\r\n            yards,\r\n            int,\r\n            rate\r\n        });\r\n    }\r\n});\r\n\r\n// Convert the Map values to an array of player objects\r\nconst playersBestObjArray = Array.from(bestPlayerStats.values());\r\n\r\nconst resultObject = {};\r\n\r\nqbData.forEach((entry) => {\r\n    const [name, year, completionPerc, yards, int, rate] = entry;\r\n\r\n    if (resultObject[name]) {\r\n        // If the entry already exists, append values to their respective arrays\r\n        resultObject[name].years.push(year);\r\n        resultObject[name].completionPerc.push(completionPerc);\r\n        resultObject[name].yards.push(yards);\r\n        resultObject[name].int.push(int);\r\n        resultObject[name].rate.push(rate);\r\n    } else {\r\n        // If the entry doesn't exist, create a new object with arrays\r\n        resultObject[name] = {\r\n            years: [year],\r\n            completionPerc: [completionPerc],\r\n            yards: [yards],\r\n            int: [int],\r\n            rate: [rate],\r\n        };\r\n    }\r\n});\r\n\r\n// Convert the resultObject into an array of objects\r\nconst comparisonArray = Object.keys(resultObject).map((name) => ({\r\n    name,\r\n    years: resultObject[name].years,\r\n    completionPerc: resultObject[name].completionPerc,\r\n    yards: resultObject[name].yards,\r\n    int: resultObject[name].int,\r\n    rate: resultObject[name].rate,\r\n}));\r\n\r\n\r\nconst recordValues = {\r\n    completionPerc: [qbData[0][2], qbData[0][0]],\r\n    yards: [qbData[0][3], qbData[0][0]],\r\n    ints: [qbData[0][4], qbData[0][0]],\r\n    rate: [qbData[0][5], qbData[0][0]],\r\n};\r\n\r\nqbData.forEach(player => {\r\n    const [playerName, , completionPerc, yards, ints, rate] = player;\r\n\r\n    if (completionPerc > recordValues.completionPerc[0]) {\r\n        recordValues.completionPerc = [completionPerc, playerName];\r\n    }\r\n\r\n    if (yards > recordValues.yards[0]) {\r\n        recordValues.yards = [yards, playerName];\r\n    }\r\n\r\n    if (ints > recordValues.ints[0]) {\r\n      recordValues.ints = [ints, playerName];\r\n    }\r\n\r\n    if (rate > recordValues.rate[0]) {\r\n      recordValues.rate = [rate, playerName];\r\n    }\r\n});\r\n\r\nexport {\r\n    playerTilePhotos,\r\n    playersBestObjArray,\r\n    comparisonArray,\r\n    recordValues\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}